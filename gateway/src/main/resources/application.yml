spring:
  datasource:
    url: jdbc:postgresql://localhost:5431/bankapp
    username: user
    password: pass
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  config:
    import: "consul:"
  application:
    name: gateway            # Логическое имя сервиса A
  cloud:
    consul:
      host: localhost          # Адрес Consul (по умолчанию localhost)
      port: 8500               # Порт Consul (8500 по умолчанию)
      discovery:
        service-name: gateway  # Необязательно, по умолчанию берётся spring.application.name
        health-check-path: /actuator/health   # Путь к health-check
        health-check-interval: 10s            # Интервал проверки
      config:
        enabled: true            # Включаем Consul Config для внешней конфигурации
        prefix: config           # Префикс в KV-хранилище Consul (по умолчанию "config")
        defaultContext: application  # Контекст по умолчанию
    gateway:
      mvc:
        routes:
          - id: front-ui-login
            uri: lb://front-ui            # ВАЖНО: lb://, а не http://accounts:8080
            predicates:
              - Path=/front-ui/login
            filters:
              - SetPath=/login

          - id: accounts-signup
            uri: lb://accounts
            predicates:
              - Path=/accounts/signup
            filters:
              - RewritePath=/accounts/signup, /signup
server:
  port: 8080                   # Порт сервиса А (например, 8080)
management:
  endpoints:
    web:
      exposure:
        include: health,info,loggers,gateway   # откроет /actuator/gateway
  endpoint:
    gateway:
      enabled: true    # обычно и так true, но явно включим
logging:
  level:
    org.springframework.cloud.gateway.server.mvc: TRACE
    org.springframework.web.servlet.function: TRACE
    org.springframework.web: DEBUG
